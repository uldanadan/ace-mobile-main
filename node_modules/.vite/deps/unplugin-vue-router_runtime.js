import {
  useRoute,
  useRouter
} from "./chunk-HVDS3QL2.js";
import "./chunk-ZJ6JMVHW.js";
import {
  effectScope,
  ref
} from "./chunk-ICGBQLHW.js";
import "./chunk-S5KM4IGW.js";

// node_modules/unplugin-vue-router/dist/chunk-L2OPP4OY.mjs
var isArray = Array.isArray;
var __DEV__ = true;

// node_modules/unplugin-vue-router/dist/runtime.mjs
function isCacheExpired(entry, options) {
  const { cacheTime } = options;
  return !cacheTime || Date.now() - entry.when >= cacheTime || Array.from(entry.loaders).some(
    (childEntry) => isCacheExpired(childEntry, options)
  );
}
function createDataCacheEntry(options, initialData) {
  return withinScope(() => ({
    pending: ref(false),
    error: ref(),
    when: Date.now(),
    loaders: /* @__PURE__ */ new Set(),
    data: ref(initialData),
    params: {},
    query: {},
    isReady: false
  }));
}
function updateDataCacheEntry(entry, data, params, query, hash) {
  entry.when = Date.now();
  entry.params = params;
  entry.query = query;
  entry.hash = hash.v;
  entry.isReady = true;
  entry.data.value = data;
}
var scope;
function withinScope(fn) {
  return (scope = scope || effectScope(true)).run(fn);
}
function stopScope() {
  if (scope) {
    scope.stop();
    scope = void 0;
  }
}
var currentContext;
function getCurrentContext() {
  return currentContext || [];
}
function setCurrentContext(context) {
  currentContext = context;
}
function includesParams(outer, inner) {
  for (const key in inner) {
    const innerValue = inner[key];
    const outerValue = outer[key];
    if (typeof innerValue === "string") {
      if (innerValue !== outerValue)
        return false;
    } else if (!innerValue || !outerValue) {
      if (innerValue !== outerValue)
        return false;
    } else {
      if (!Array.isArray(outerValue) || outerValue.length !== innerValue.length || innerValue.some((value, i) => value !== outerValue[i]))
        return false;
    }
  }
  return true;
}
var DEFAULT_DEFINE_LOADER_OPTIONS = {
  cacheTime: 1e3 * 5,
  lazy: false,
  key: ""
};
function defineLoader(nameOrLoader, _loaderOrOptions, opts) {
  const loader = typeof nameOrLoader === "function" ? nameOrLoader : _loaderOrOptions;
  opts = typeof _loaderOrOptions === "object" ? _loaderOrOptions : opts;
  const options = { ...DEFAULT_DEFINE_LOADER_OPTIONS, ...opts };
  const dataLoader = () => {
    let [parentEntry, _router, _route] = getCurrentContext();
    const router = _router || useRouter();
    const route = _route || useRoute();
    if (!cache.has(router) || parentEntry) {
      load(route, router, parentEntry);
    }
    const entry = cache.get(router);
    const promise = Promise.resolve(pendingPromise).then(() => dataLoaderResult).finally(() => {
      if (parentEntry) {
        parentEntry.loaders.add(entry);
      }
      setCurrentContext(parentEntry && [parentEntry, router, route]);
    });
    const { data, pending, error } = entry;
    function refresh() {
      invalidate();
      load(route, router, parentEntry);
      return pendingPromise.catch(() => {
      });
    }
    function invalidate() {
      entry.when = 0;
    }
    const dataLoaderResult = {
      data,
      pending,
      error,
      refresh,
      invalidate,
      pendingLoad
    };
    return Object.assign(promise, dataLoaderResult);
  };
  const cache = /* @__PURE__ */ new WeakMap();
  let pendingPromise;
  let currentNavigation;
  const pendingLoad = () => pendingPromise;
  function load(route, router, parent, initialRootData) {
    const hasCacheEntry = cache.has(router);
    const initialData = initialRootData && initialRootData[options.key];
    if (!hasCacheEntry) {
      cache.set(router, createDataCacheEntry(options, initialData));
    }
    const entry = cache.get(router);
    if (initialData) {
      entry.when = 0;
      return Promise.resolve();
    }
    const needsNewLoad = !hasCacheEntry || shouldFetchAgain(entry, route);
    const { isReady, pending, error } = entry;
    const { lazy } = options;
    const isExpired = isCacheExpired(entry, options);
    if (pendingPromise && !needsNewLoad && currentNavigation === route && (!isReady || !isExpired)) {
      return lazy ? Promise.resolve() : pendingPromise;
    }
    if (needsNewLoad || !isReady && currentNavigation !== route || isReady && isExpired) {
      pending.value = true;
      error.value = null;
      currentNavigation = route;
      const [trackedRoute, params, query, hash] = trackRoute(route);
      if (!pendingPromise) {
        setCurrentContext([entry, router, route]);
      }
      const thisPromise = pendingPromise = loader(trackedRoute).then((data) => {
        if (pendingPromise === thisPromise) {
          updateDataCacheEntry(entry, data, params, query, hash);
        }
      }).catch((err) => {
        error.value = err;
        return Promise.reject(err);
      }).finally(() => {
        if (pendingPromise === thisPromise) {
          pendingPromise = null;
          pending.value = false;
        }
        setCurrentContext(parent && [parent, router, route]);
      });
    }
    return lazy || !pendingPromise ? Promise.resolve() : pendingPromise;
  }
  dataLoader._ = {
    loader,
    cache,
    load,
    options
  };
  dataLoader[IsLoader] = true;
  return dataLoader;
}
function shouldFetchAgain(entry, route) {
  return !entry.when || !includesParams(route.params, entry.params) || !includesParams(route.query, entry.query) || entry.hash != null && entry.hash !== route.hash || Array.from(entry.loaders).some(
    (childEntry) => shouldFetchAgain(childEntry, route)
  );
}
var IsLoader = Symbol();
function isDataLoader(loader) {
  return loader && loader[IsLoader];
}
function trackRoute(route) {
  const [params, paramReads] = trackObjectReads(route.params);
  const [query, queryReads] = trackObjectReads(route.query);
  let hash = { v: null };
  return [
    {
      ...route,
      get hash() {
        return hash.v = route.hash;
      },
      params,
      query
    },
    paramReads,
    queryReads,
    hash
  ];
}
function trackObjectReads(obj) {
  const reads = {};
  return [
    new Proxy(obj, {
      get(target, p, receiver) {
        const value = Reflect.get(target, p, receiver);
        reads[p] = value;
        return value;
      }
    }),
    reads
  ];
}
var HasDataLoaderMeta = Symbol();
var ADDED_SYMBOL = Symbol();
function setupDataFetchingGuard(router, { initialData } = {}) {
  if (__DEV__) {
    if (ADDED_SYMBOL in router) {
      console.warn(
        "[vue-router]: Data fetching guard added twice. Make sure to remove the extra call."
      );
      return;
    }
    router[ADDED_SYMBOL] = true;
  }
  const fetchedState = {};
  let isFetched;
  router.beforeEach((to) => {
    return Promise.all(
      to.matched.flatMap((route) => route.meta[HasDataLoaderMeta]).filter((moduleImport) => moduleImport).map(
        (moduleImport) => moduleImport().then((mod) => {
          const loaders = Object.keys(mod).filter((exportName) => isDataLoader(mod[exportName])).map((loaderName) => mod[loaderName]);
          return Promise.all(
            loaders.map((loader) => {
              const {
                options: { key },
                cache
              } = loader._;
              return loader._.load(
                to,
                router,
                void 0,
                initialData
              ).then(() => {
                if (!initialData) {
                  if (key) {
                    fetchedState[key] = cache.get(router).data.value;
                  }
                } else if (__DEV__ && !key && !isFetched) {
                }
              });
            })
          );
        })
      )
    ).then(() => {
      initialData = void 0;
      isFetched = true;
    });
  });
  return initialData ? null : fetchedState;
}
var _definePage = (route) => route;
function _mergeRouteRecord(main, ...routeRecords) {
  return routeRecords.reduce((acc, routeRecord) => {
    const meta = Object.assign({}, acc.meta, routeRecord.meta);
    Object.assign(acc, routeRecord);
    acc.meta = meta;
    return acc;
  }, main);
}
export {
  HasDataLoaderMeta as _HasDataLoaderMeta,
  defineLoader as _defineLoader,
  _definePage,
  _mergeRouteRecord,
  setupDataFetchingGuard as _setupDataFetchingGuard,
  stopScope as _stopDataFetchingScope
};
//# sourceMappingURL=unplugin-vue-router_runtime.js.map
