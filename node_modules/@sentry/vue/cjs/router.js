Object.defineProperty(exports, '__esModule', { value: true });

const browser = require('@sentry/browser');
const core = require('@sentry/core');
const tracing = require('./tracing.js');

/**
 * Creates routing instrumentation for Vue Router v2, v3 and v4
 *
 * You can optionally pass in an options object with the available option:
 * * `routeLabel`: Set this to `route` to opt-out of using `route.name` for transaction names.
 *
 * @param router The Vue Router instance that is used
 *
 * @deprecated Use `browserTracingIntegration()` from `@sentry/vue` instead - this includes the vue router instrumentation.
 */
function vueRouterInstrumentation(
  router,
  options = {},
) {
  return (
    startTransaction,
    startTransactionOnPageLoad = true,
    startTransactionOnLocationChange = true,
  ) => {
    // We have to start the pageload transaction as early as possible (before the router's `beforeEach` hook
    // is called) to not miss child spans of the pageload.
    // We check that window & window.location exists in order to not run this code in SSR environments.
    if (startTransactionOnPageLoad && browser.WINDOW && browser.WINDOW.location) {
      startTransaction({
        name: browser.WINDOW.location.pathname,
        op: 'pageload',
        attributes: {
          [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.pageload.vue',
          [core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'url',
        },
      });
    }

    instrumentVueRouter(
      router,
      {
        routeLabel: options.routeLabel || 'name',
        instrumentNavigation: startTransactionOnLocationChange,
        instrumentPageLoad: startTransactionOnPageLoad,
      },
      startTransaction,
    );
  };
}

/**
 * Instrument the Vue router to create navigation spans.
 */
function instrumentVueRouter(
  router,
  options

,
  startNavigationSpanFn,
) {
  router.onError(error => browser.captureException(error, { mechanism: { handled: false } }));

  router.beforeEach((to, from, next) => {
    // According to docs we could use `from === VueRouter.START_LOCATION` but I couldnt get it working for Vue 2
    // https://router.vuejs.org/api/#router-start-location
    // https://next.router.vuejs.org/api/#start-location

    // from.name:
    // - Vue 2: null
    // - Vue 3: undefined
    // hence only '==' instead of '===', because `undefined == null` evaluates to `true`
    const isPageLoadNavigation = from.name == null && from.matched.length === 0;

    const attributes = {
      [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.navigation.vue',
    };

    for (const key of Object.keys(to.params)) {
      attributes[`params.${key}`] = to.params[key];
    }
    for (const key of Object.keys(to.query)) {
      const value = to.query[key];
      if (value) {
        attributes[`query.${key}`] = value;
      }
    }

    // Determine a name for the routing transaction and where that name came from
    let transactionName = to.path;
    let transactionSource = 'url';
    if (to.name && options.routeLabel !== 'path') {
      transactionName = to.name.toString();
      transactionSource = 'custom';
    } else if (to.matched[0] && to.matched[0].path) {
      transactionName = to.matched[0].path;
      transactionSource = 'route';
    }

    if (options.instrumentPageLoad && isPageLoadNavigation) {
      // eslint-disable-next-line deprecation/deprecation
      const pageloadTransaction = tracing.getActiveTransaction();
      if (pageloadTransaction) {
        const existingAttributes = core.spanToJSON(pageloadTransaction).data || {};
        if (existingAttributes[core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] !== 'custom') {
          pageloadTransaction.updateName(transactionName);
          pageloadTransaction.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE, transactionSource);
        }
        // Set router attributes on the existing pageload transaction
        // This will  the origin, and add params & query attributes
        pageloadTransaction.setAttributes({
          ...attributes,
          [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.pageload.vue',
        });
      }
    }

    if (options.instrumentNavigation && !isPageLoadNavigation) {
      attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] = transactionSource;
      startNavigationSpanFn({
        name: transactionName,
        op: 'navigation',
        attributes,
      });
    }

    // Vue Router 4 no longer exposes the `next` function, so we need to
    // check if it's available before calling it.
    // `next` needs to be called in Vue Router 3 so that the hook is resolved.
    if (next) {
      next();
    }
  });
}

exports.instrumentVueRouter = instrumentVueRouter;
exports.vueRouterInstrumentation = vueRouterInstrumentation;
//# sourceMappingURL=router.js.map
