import * as _babel_parser from '@babel/parser';
import { ParserPlugin } from '@babel/parser';
import * as _babel_types from '@babel/types';
import { Node, Function, Identifier } from '@babel/types';

interface ParseOptions {
    filename?: string;
    parserPlugins?: ParserPlugin[];
}
declare type Scope = Record<string, Node>;
interface WalkerContext {
    skip: () => void;
    remove: () => void;
    replace: (node: Node) => void;
}
interface HookContext extends WalkerContext {
    parent: Node;
    key: string;
    index: number;
    scope: Scope;
    scopes: Scope[];
    level: number;
}
interface WalkerHooks {
    enter?: (this: HookContext, node: Node) => void;
    leave?: (this: HookContext, node: Node) => void;
}

declare const isNewScope: (node: Node) => boolean;
declare function walkFunctionParams(node: Function, onIdent: (id: Identifier) => void): void;
declare function extractIdentifiers(param: Node, nodes?: Identifier[]): Identifier[];

declare const walk: (code: string, walkHooks: WalkerHooks, { filename, parserPlugins }?: ParseOptions) => _babel_parser.ParseResult<_babel_types.File>;
declare const walkAST: (node: Node, { enter, leave }: WalkerHooks) => void;

export { HookContext, ParseOptions, Scope, WalkerContext, WalkerHooks, extractIdentifiers, isNewScope, walk, walkAST, walkFunctionParams };
