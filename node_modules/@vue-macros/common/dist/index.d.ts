import MagicStringBase, { OverwriteOptions } from 'magic-string';
import { Node, Program, CallExpression, Literal } from '@babel/types';
import { SFCScriptBlock, SFCDescriptor } from '@vue/compiler-sfc';

declare class MagicString extends MagicStringBase {
    removeNode(node: Node, { offset }?: {
        offset?: number;
    }): this;
    moveNode(node: Node, index: number, { offset }?: {
        offset?: number;
    }): this;
    sliceNode(node: Node, { offset }?: {
        offset?: number;
    }): string;
    overwriteNode(node: Node, content: string | Node, { offset, ...options }?: OverwriteOptions & {
        offset?: number;
    }): this;
}

declare type _SFCScriptBlock = Omit<SFCScriptBlock, 'scriptAst' | 'scriptSetupAst'>;
declare type SFCCompiled = Omit<SFCDescriptor, 'script' | 'scriptSetup'> & {
    script?: _SFCScriptBlock | null;
    scriptSetup?: _SFCScriptBlock | null;
    scriptCompiled: SFCScriptBlock;
    lang: string | undefined;
};
declare const parseSFC: (code: string, id: string) => SFCCompiled;
declare const addNormalScript: ({ script, lang }: SFCCompiled, s: MagicString) => {
    start(): number;
    end(): void;
};

declare function getLang(filename: string): string;
declare function babelParse(code: string, lang?: string): Program;
declare function isCallOf(node: Node | null | undefined, test: string | ((id: string) => boolean)): node is CallExpression;
declare function checkInvalidScopeReference(node: Node | undefined, method: string, setupBindings: string[]): void;
declare function isStaticExpression(node: Node): boolean;
declare function isLiteralType(node: Node): node is Literal;

declare const DEFINE_PROPS = "defineProps";
declare const DEFINE_EMITS = "defineEmits";
declare const DEFINE_OPTIONS = "defineOptions";
declare const DEFINE_MODEL = "defineModel";
declare const DEFINE_SETUP_COMPONENT = "defineSetupComponent";
declare const DEFINE_RENDER = "defineRender";
declare const REPO_ISSUE_URL = "https://github.com/sxzz/unplugin-vue-macros/issues";
declare const MAGIC_COMMENT_STATIC = "hoist-static";

declare const getTransformResult: (s: MagicStringBase | undefined, id: string) => {
    code: string;
    map: any;
} | undefined;

export { DEFINE_EMITS, DEFINE_MODEL, DEFINE_OPTIONS, DEFINE_PROPS, DEFINE_RENDER, DEFINE_SETUP_COMPONENT, MAGIC_COMMENT_STATIC, MagicString, REPO_ISSUE_URL, SFCCompiled, _SFCScriptBlock, addNormalScript, babelParse, checkInvalidScopeReference, getLang, getTransformResult, isCallOf, isLiteralType, isStaticExpression, parseSFC };
